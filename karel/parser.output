   0  $accept : %entry% $end

   1  prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG

   2  stmts_opt :
   3            | stmts

   4  stmts : stmt
   5        | stmts SEMI stmt
   6        | stmts SEMI

   7  stmt : simple_stmt
   8       | iterate
   9       | whil
  10       | if_sans_else
  11       | ID

  12  iterate : ITERATE INT TIMES BEGIN stmts END
  13          | ITERATE INT TIMES stmt

  14  whil : WHILE test DO stmt
  15       | WHILE test DO BEGIN stmts END

  16  if_sans_else : IF test THEN stmt
  17               | IF test THEN BEGIN stmts END

  18  define_new : DEFINE_NEW_INSTRUCTION ID AS stmts

  19  sous_prog : define_new sous_prog
  20            |

  21  test : FRONT_IS_CLEAR
  22       | FRONT_IS_BLOCKED
  23       | LEFT_IS_CLEAR
  24       | LEFT_IS_BLOCKED
  25       | RIGHT_IS_CLEAR
  26       | RIGHT_IS_BLOCKED
  27       | NEXT_TO_A_BEEPER
  28       | NOT_NEXT_TO_A_BEEPER
  29       | FACING_NORTH
  30       | NOT_FACING_NORTH
  31       | FACING_SOUTH
  32       | NOT_FACING_SOUTH
  33       | FACING_EAST
  34       | NOT_FACING_EAST
  35       | FACING_WEST
  36       | NOT_FACING_WEST

  37  simple_stmt : TURN_LEFT
  38              | TURN_OFF
  39              | MOVE
  40              | PICK_BEEPER
  41              | PUT_BEEPER

  42  %entry% : '\001' prog

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . prog  (42)

	BEGIN_PROG  shift 3
	.  error

	prog  goto 4


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	prog : BEGIN_PROG . sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG  (1)
	sous_prog : .  (20)

	DEFINE_NEW_INSTRUCTION  shift 5
	BEGIN_EXEC  reduce 20

	sous_prog  goto 6
	define_new  goto 7


state 4
	%entry% : '\001' prog .  (42)

	.  reduce 42


state 5
	define_new : DEFINE_NEW_INSTRUCTION . ID AS stmts  (18)

	ID  shift 8
	.  error


state 6
	prog : BEGIN_PROG sous_prog . BEGIN_EXEC stmts_opt END_EXEC END_PROG  (1)

	BEGIN_EXEC  shift 9
	.  error


state 7
	sous_prog : define_new . sous_prog  (19)
	sous_prog : .  (20)

	DEFINE_NEW_INSTRUCTION  shift 5
	BEGIN_EXEC  reduce 20

	sous_prog  goto 10
	define_new  goto 7


state 8
	define_new : DEFINE_NEW_INSTRUCTION ID . AS stmts  (18)

	AS  shift 11
	.  error


state 9
	prog : BEGIN_PROG sous_prog BEGIN_EXEC . stmts_opt END_EXEC END_PROG  (1)
	stmts_opt : .  (2)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	END_EXEC  reduce 2

	stmts_opt  goto 21
	stmts  goto 22
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 10
	sous_prog : define_new sous_prog .  (19)

	.  reduce 19


state 11
	define_new : DEFINE_NEW_INSTRUCTION ID AS . stmts  (18)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 28
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 12
	simple_stmt : MOVE .  (39)

	.  reduce 39


state 13
	simple_stmt : TURN_LEFT .  (37)

	.  reduce 37


state 14
	simple_stmt : TURN_OFF .  (38)

	.  reduce 38


state 15
	simple_stmt : PICK_BEEPER .  (40)

	.  reduce 40


state 16
	simple_stmt : PUT_BEEPER .  (41)

	.  reduce 41


state 17
	iterate : ITERATE . INT TIMES BEGIN stmts END  (12)
	iterate : ITERATE . INT TIMES stmt  (13)

	INT  shift 29
	.  error


state 18
	whil : WHILE . test DO stmt  (14)
	whil : WHILE . test DO BEGIN stmts END  (15)

	NEXT_TO_A_BEEPER  shift 30
	FRONT_IS_CLEAR  shift 31
	FRONT_IS_BLOCKED  shift 32
	LEFT_IS_CLEAR  shift 33
	LEFT_IS_BLOCKED  shift 34
	RIGHT_IS_CLEAR  shift 35
	RIGHT_IS_BLOCKED  shift 36
	NOT_NEXT_TO_A_BEEPER  shift 37
	FACING_NORTH  shift 38
	NOT_FACING_NORTH  shift 39
	FACING_SOUTH  shift 40
	NOT_FACING_SOUTH  shift 41
	FACING_EAST  shift 42
	NOT_FACING_EAST  shift 43
	FACING_WEST  shift 44
	NOT_FACING_WEST  shift 45
	.  error

	test  goto 46


state 19
	if_sans_else : IF . test THEN stmt  (16)
	if_sans_else : IF . test THEN BEGIN stmts END  (17)

	NEXT_TO_A_BEEPER  shift 30
	FRONT_IS_CLEAR  shift 31
	FRONT_IS_BLOCKED  shift 32
	LEFT_IS_CLEAR  shift 33
	LEFT_IS_BLOCKED  shift 34
	RIGHT_IS_CLEAR  shift 35
	RIGHT_IS_BLOCKED  shift 36
	NOT_NEXT_TO_A_BEEPER  shift 37
	FACING_NORTH  shift 38
	NOT_FACING_NORTH  shift 39
	FACING_SOUTH  shift 40
	NOT_FACING_SOUTH  shift 41
	FACING_EAST  shift 42
	NOT_FACING_EAST  shift 43
	FACING_WEST  shift 44
	NOT_FACING_WEST  shift 45
	.  error

	test  goto 47


state 20
	stmt : ID .  (11)

	.  reduce 11


state 21
	prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt . END_EXEC END_PROG  (1)

	END_EXEC  shift 48
	.  error


state 22
	stmts_opt : stmts .  (3)
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)

	SEMI  shift 49
	END_EXEC  reduce 3


state 23
	stmts : stmt .  (4)

	.  reduce 4


state 24
	stmt : simple_stmt .  (7)

	.  reduce 7


state 25
	stmt : iterate .  (8)

	.  reduce 8


state 26
	stmt : whil .  (9)

	.  reduce 9


state 27
	stmt : if_sans_else .  (10)

	.  reduce 10


state 28
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	define_new : DEFINE_NEW_INSTRUCTION ID AS stmts .  (18)

	SEMI  shift 49
	BEGIN_EXEC  reduce 18
	DEFINE_NEW_INSTRUCTION  reduce 18


state 29
	iterate : ITERATE INT . TIMES BEGIN stmts END  (12)
	iterate : ITERATE INT . TIMES stmt  (13)

	TIMES  shift 50
	.  error


state 30
	test : NEXT_TO_A_BEEPER .  (27)

	.  reduce 27


state 31
	test : FRONT_IS_CLEAR .  (21)

	.  reduce 21


state 32
	test : FRONT_IS_BLOCKED .  (22)

	.  reduce 22


state 33
	test : LEFT_IS_CLEAR .  (23)

	.  reduce 23


state 34
	test : LEFT_IS_BLOCKED .  (24)

	.  reduce 24


state 35
	test : RIGHT_IS_CLEAR .  (25)

	.  reduce 25


state 36
	test : RIGHT_IS_BLOCKED .  (26)

	.  reduce 26


state 37
	test : NOT_NEXT_TO_A_BEEPER .  (28)

	.  reduce 28


state 38
	test : FACING_NORTH .  (29)

	.  reduce 29


state 39
	test : NOT_FACING_NORTH .  (30)

	.  reduce 30


state 40
	test : FACING_SOUTH .  (31)

	.  reduce 31


state 41
	test : NOT_FACING_SOUTH .  (32)

	.  reduce 32


state 42
	test : FACING_EAST .  (33)

	.  reduce 33


state 43
	test : NOT_FACING_EAST .  (34)

	.  reduce 34


state 44
	test : FACING_WEST .  (35)

	.  reduce 35


state 45
	test : NOT_FACING_WEST .  (36)

	.  reduce 36


state 46
	whil : WHILE test . DO stmt  (14)
	whil : WHILE test . DO BEGIN stmts END  (15)

	DO  shift 51
	.  error


state 47
	if_sans_else : IF test . THEN stmt  (16)
	if_sans_else : IF test . THEN BEGIN stmts END  (17)

	THEN  shift 52
	.  error


state 48
	prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt END_EXEC . END_PROG  (1)

	END_PROG  shift 53
	.  error


state 49
	stmts : stmts SEMI . stmt  (5)
	stmts : stmts SEMI .  (6)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	BEGIN_EXEC  reduce 6
	END_EXEC  reduce 6
	SEMI  reduce 6
	END  reduce 6
	DEFINE_NEW_INSTRUCTION  reduce 6

	stmt  goto 54
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 50
	iterate : ITERATE INT TIMES . BEGIN stmts END  (12)
	iterate : ITERATE INT TIMES . stmt  (13)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 55
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmt  goto 56
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 51
	whil : WHILE test DO . stmt  (14)
	whil : WHILE test DO . BEGIN stmts END  (15)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 57
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmt  goto 58
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 52
	if_sans_else : IF test THEN . stmt  (16)
	if_sans_else : IF test THEN . BEGIN stmts END  (17)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 59
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmt  goto 60
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 53
	prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG .  (1)

	.  reduce 1


state 54
	stmts : stmts SEMI stmt .  (5)

	.  reduce 5


state 55
	iterate : ITERATE INT TIMES BEGIN . stmts END  (12)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 61
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 56
	iterate : ITERATE INT TIMES stmt .  (13)

	.  reduce 13


state 57
	whil : WHILE test DO BEGIN . stmts END  (15)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 62
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 58
	whil : WHILE test DO stmt .  (14)

	.  reduce 14


state 59
	if_sans_else : IF test THEN BEGIN . stmts END  (17)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 63
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 60
	if_sans_else : IF test THEN stmt .  (16)

	.  reduce 16


state 61
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	iterate : ITERATE INT TIMES BEGIN stmts . END  (12)

	SEMI  shift 49
	END  shift 64
	.  error


state 62
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	whil : WHILE test DO BEGIN stmts . END  (15)

	SEMI  shift 49
	END  shift 65
	.  error


state 63
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	if_sans_else : IF test THEN BEGIN stmts . END  (17)

	SEMI  shift 49
	END  shift 66
	.  error


state 64
	iterate : ITERATE INT TIMES BEGIN stmts END .  (12)

	.  reduce 12


state 65
	whil : WHILE test DO BEGIN stmts END .  (15)

	.  reduce 15


state 66
	if_sans_else : IF test THEN BEGIN stmts END .  (17)

	.  reduce 17


43 terminals, 13 nonterminals
43 grammar rules, 67 states
