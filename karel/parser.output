   0  $accept : %entry% $end

   1  prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG

   2  stmts_opt :
   3            | stmts

   4  stmts : stmt
   5        | stmts SEMI stmt
   6        | stmts SEMI

   7  stmt : simple_stmt
   8       | iterate
   9       | whil
  10       | if_sans_else
  11       | ID

  12  iterate : ITERATE INT TIMES BEGIN stmts END
  13          | ITERATE INT TIMES stmt
  14          | ITERATE INT TIMES iterate

  15  whil : WHILE test DO stmt
  16       | WHILE test DO BEGIN stmts END
  17       | WHILE test DO whil

  18  if_sans_else : IF test THEN stmt
  19               | IF test THEN BEGIN stmts END
  20               | IF test THEN if_sans_else

  21  define_new : DEFINE_NEW_INSTRUCTION ID AS stmts

  22  sous_prog : define_new sous_prog
  23            |

  24  test : FRONT_IS_CLEAR
  25       | FRONT_IS_BLOCKED
  26       | LEFT_IS_CLEAR
  27       | LEFT_IS_BLOCKED
  28       | RIGHT_IS_CLEAR
  29       | RIGHT_IS_BLOCKED
  30       | NEXT_TO_A_BEEPER
  31       | NOT_NEXT_TO_A_BEEPER
  32       | FACING_NORTH
  33       | NOT_FACING_NORTH
  34       | FACING_SOUTH
  35       | NOT_FACING_SOUTH
  36       | FACING_EAST
  37       | NOT_FACING_EAST
  38       | FACING_WEST
  39       | NOT_FACING_WEST

  40  simple_stmt : TURN_LEFT
  41              | TURN_OFF
  42              | MOVE
  43              | PICK_BEEPER
  44              | PUT_BEEPER

  45  %entry% : '\001' prog

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . prog  (45)

	BEGIN_PROG  shift 3
	.  error

	prog  goto 4


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	prog : BEGIN_PROG . sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG  (1)
	sous_prog : .  (23)

	DEFINE_NEW_INSTRUCTION  shift 5
	BEGIN_EXEC  reduce 23

	sous_prog  goto 6
	define_new  goto 7


state 4
	%entry% : '\001' prog .  (45)

	.  reduce 45


state 5
	define_new : DEFINE_NEW_INSTRUCTION . ID AS stmts  (21)

	ID  shift 8
	.  error


state 6
	prog : BEGIN_PROG sous_prog . BEGIN_EXEC stmts_opt END_EXEC END_PROG  (1)

	BEGIN_EXEC  shift 9
	.  error


state 7
	sous_prog : define_new . sous_prog  (22)
	sous_prog : .  (23)

	DEFINE_NEW_INSTRUCTION  shift 5
	BEGIN_EXEC  reduce 23

	sous_prog  goto 10
	define_new  goto 7


state 8
	define_new : DEFINE_NEW_INSTRUCTION ID . AS stmts  (21)

	AS  shift 11
	.  error


state 9
	prog : BEGIN_PROG sous_prog BEGIN_EXEC . stmts_opt END_EXEC END_PROG  (1)
	stmts_opt : .  (2)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	END_EXEC  reduce 2

	stmts_opt  goto 21
	stmts  goto 22
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 10
	sous_prog : define_new sous_prog .  (22)

	.  reduce 22


state 11
	define_new : DEFINE_NEW_INSTRUCTION ID AS . stmts  (21)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 28
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 12
	simple_stmt : MOVE .  (42)

	.  reduce 42


state 13
	simple_stmt : TURN_LEFT .  (40)

	.  reduce 40


state 14
	simple_stmt : TURN_OFF .  (41)

	.  reduce 41


state 15
	simple_stmt : PICK_BEEPER .  (43)

	.  reduce 43


state 16
	simple_stmt : PUT_BEEPER .  (44)

	.  reduce 44


state 17
	iterate : ITERATE . INT TIMES BEGIN stmts END  (12)
	iterate : ITERATE . INT TIMES stmt  (13)
	iterate : ITERATE . INT TIMES iterate  (14)

	INT  shift 29
	.  error


state 18
	whil : WHILE . test DO stmt  (15)
	whil : WHILE . test DO BEGIN stmts END  (16)
	whil : WHILE . test DO whil  (17)

	NEXT_TO_A_BEEPER  shift 30
	FRONT_IS_CLEAR  shift 31
	FRONT_IS_BLOCKED  shift 32
	LEFT_IS_CLEAR  shift 33
	LEFT_IS_BLOCKED  shift 34
	RIGHT_IS_CLEAR  shift 35
	RIGHT_IS_BLOCKED  shift 36
	NOT_NEXT_TO_A_BEEPER  shift 37
	FACING_NORTH  shift 38
	NOT_FACING_NORTH  shift 39
	FACING_SOUTH  shift 40
	NOT_FACING_SOUTH  shift 41
	FACING_EAST  shift 42
	NOT_FACING_EAST  shift 43
	FACING_WEST  shift 44
	NOT_FACING_WEST  shift 45
	.  error

	test  goto 46


state 19
	if_sans_else : IF . test THEN stmt  (18)
	if_sans_else : IF . test THEN BEGIN stmts END  (19)
	if_sans_else : IF . test THEN if_sans_else  (20)

	NEXT_TO_A_BEEPER  shift 30
	FRONT_IS_CLEAR  shift 31
	FRONT_IS_BLOCKED  shift 32
	LEFT_IS_CLEAR  shift 33
	LEFT_IS_BLOCKED  shift 34
	RIGHT_IS_CLEAR  shift 35
	RIGHT_IS_BLOCKED  shift 36
	NOT_NEXT_TO_A_BEEPER  shift 37
	FACING_NORTH  shift 38
	NOT_FACING_NORTH  shift 39
	FACING_SOUTH  shift 40
	NOT_FACING_SOUTH  shift 41
	FACING_EAST  shift 42
	NOT_FACING_EAST  shift 43
	FACING_WEST  shift 44
	NOT_FACING_WEST  shift 45
	.  error

	test  goto 47


state 20
	stmt : ID .  (11)

	.  reduce 11


state 21
	prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt . END_EXEC END_PROG  (1)

	END_EXEC  shift 48
	.  error


state 22
	stmts_opt : stmts .  (3)
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)

	SEMI  shift 49
	END_EXEC  reduce 3


state 23
	stmts : stmt .  (4)

	.  reduce 4


state 24
	stmt : simple_stmt .  (7)

	.  reduce 7


state 25
	stmt : iterate .  (8)

	.  reduce 8


state 26
	stmt : whil .  (9)

	.  reduce 9


state 27
	stmt : if_sans_else .  (10)

	.  reduce 10


state 28
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	define_new : DEFINE_NEW_INSTRUCTION ID AS stmts .  (21)

	SEMI  shift 49
	BEGIN_EXEC  reduce 21
	DEFINE_NEW_INSTRUCTION  reduce 21


state 29
	iterate : ITERATE INT . TIMES BEGIN stmts END  (12)
	iterate : ITERATE INT . TIMES stmt  (13)
	iterate : ITERATE INT . TIMES iterate  (14)

	TIMES  shift 50
	.  error


state 30
	test : NEXT_TO_A_BEEPER .  (30)

	.  reduce 30


state 31
	test : FRONT_IS_CLEAR .  (24)

	.  reduce 24


state 32
	test : FRONT_IS_BLOCKED .  (25)

	.  reduce 25


state 33
	test : LEFT_IS_CLEAR .  (26)

	.  reduce 26


state 34
	test : LEFT_IS_BLOCKED .  (27)

	.  reduce 27


state 35
	test : RIGHT_IS_CLEAR .  (28)

	.  reduce 28


state 36
	test : RIGHT_IS_BLOCKED .  (29)

	.  reduce 29


state 37
	test : NOT_NEXT_TO_A_BEEPER .  (31)

	.  reduce 31


state 38
	test : FACING_NORTH .  (32)

	.  reduce 32


state 39
	test : NOT_FACING_NORTH .  (33)

	.  reduce 33


state 40
	test : FACING_SOUTH .  (34)

	.  reduce 34


state 41
	test : NOT_FACING_SOUTH .  (35)

	.  reduce 35


state 42
	test : FACING_EAST .  (36)

	.  reduce 36


state 43
	test : NOT_FACING_EAST .  (37)

	.  reduce 37


state 44
	test : FACING_WEST .  (38)

	.  reduce 38


state 45
	test : NOT_FACING_WEST .  (39)

	.  reduce 39


state 46
	whil : WHILE test . DO stmt  (15)
	whil : WHILE test . DO BEGIN stmts END  (16)
	whil : WHILE test . DO whil  (17)

	DO  shift 51
	.  error


state 47
	if_sans_else : IF test . THEN stmt  (18)
	if_sans_else : IF test . THEN BEGIN stmts END  (19)
	if_sans_else : IF test . THEN if_sans_else  (20)

	THEN  shift 52
	.  error


state 48
	prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt END_EXEC . END_PROG  (1)

	END_PROG  shift 53
	.  error


state 49
	stmts : stmts SEMI . stmt  (5)
	stmts : stmts SEMI .  (6)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	BEGIN_EXEC  reduce 6
	END_EXEC  reduce 6
	SEMI  reduce 6
	END  reduce 6
	DEFINE_NEW_INSTRUCTION  reduce 6

	stmt  goto 54
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 50
	iterate : ITERATE INT TIMES . BEGIN stmts END  (12)
	iterate : ITERATE INT TIMES . stmt  (13)
	iterate : ITERATE INT TIMES . iterate  (14)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 55
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmt  goto 56
	simple_stmt  goto 24
	iterate  goto 57
	whil  goto 26
	if_sans_else  goto 27


state 51
	whil : WHILE test DO . stmt  (15)
	whil : WHILE test DO . BEGIN stmts END  (16)
	whil : WHILE test DO . whil  (17)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 58
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmt  goto 59
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 60
	if_sans_else  goto 27


state 52
	if_sans_else : IF test THEN . stmt  (18)
	if_sans_else : IF test THEN . BEGIN stmts END  (19)
	if_sans_else : IF test THEN . if_sans_else  (20)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 61
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmt  goto 62
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 63


state 53
	prog : BEGIN_PROG sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG .  (1)

	.  reduce 1


state 54
	stmts : stmts SEMI stmt .  (5)

	.  reduce 5


state 55
	iterate : ITERATE INT TIMES BEGIN . stmts END  (12)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 64
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 56
	iterate : ITERATE INT TIMES stmt .  (13)

	.  reduce 13


57: reduce/reduce conflict (reduce 8, reduce 14) on BEGIN_EXEC
57: reduce/reduce conflict (reduce 8, reduce 14) on END_EXEC
57: reduce/reduce conflict (reduce 8, reduce 14) on SEMI
57: reduce/reduce conflict (reduce 8, reduce 14) on END
57: reduce/reduce conflict (reduce 8, reduce 14) on DEFINE_NEW_INSTRUCTION
state 57
	stmt : iterate .  (8)
	iterate : ITERATE INT TIMES iterate .  (14)

	.  reduce 8


state 58
	whil : WHILE test DO BEGIN . stmts END  (16)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 65
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 59
	whil : WHILE test DO stmt .  (15)

	.  reduce 15


60: reduce/reduce conflict (reduce 9, reduce 17) on BEGIN_EXEC
60: reduce/reduce conflict (reduce 9, reduce 17) on END_EXEC
60: reduce/reduce conflict (reduce 9, reduce 17) on SEMI
60: reduce/reduce conflict (reduce 9, reduce 17) on END
60: reduce/reduce conflict (reduce 9, reduce 17) on DEFINE_NEW_INSTRUCTION
state 60
	stmt : whil .  (9)
	whil : WHILE test DO whil .  (17)

	.  reduce 9


state 61
	if_sans_else : IF test THEN BEGIN . stmts END  (19)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	PICK_BEEPER  shift 15
	PUT_BEEPER  shift 16
	ITERATE  shift 17
	WHILE  shift 18
	IF  shift 19
	ID  shift 20
	.  error

	stmts  goto 66
	stmt  goto 23
	simple_stmt  goto 24
	iterate  goto 25
	whil  goto 26
	if_sans_else  goto 27


state 62
	if_sans_else : IF test THEN stmt .  (18)

	.  reduce 18


63: reduce/reduce conflict (reduce 10, reduce 20) on BEGIN_EXEC
63: reduce/reduce conflict (reduce 10, reduce 20) on END_EXEC
63: reduce/reduce conflict (reduce 10, reduce 20) on SEMI
63: reduce/reduce conflict (reduce 10, reduce 20) on END
63: reduce/reduce conflict (reduce 10, reduce 20) on DEFINE_NEW_INSTRUCTION
state 63
	stmt : if_sans_else .  (10)
	if_sans_else : IF test THEN if_sans_else .  (20)

	.  reduce 10


state 64
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	iterate : ITERATE INT TIMES BEGIN stmts . END  (12)

	SEMI  shift 49
	END  shift 67
	.  error


state 65
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	whil : WHILE test DO BEGIN stmts . END  (16)

	SEMI  shift 49
	END  shift 68
	.  error


state 66
	stmts : stmts . SEMI stmt  (5)
	stmts : stmts . SEMI  (6)
	if_sans_else : IF test THEN BEGIN stmts . END  (19)

	SEMI  shift 49
	END  shift 69
	.  error


state 67
	iterate : ITERATE INT TIMES BEGIN stmts END .  (12)

	.  reduce 12


state 68
	whil : WHILE test DO BEGIN stmts END .  (16)

	.  reduce 16


state 69
	if_sans_else : IF test THEN BEGIN stmts END .  (19)

	.  reduce 19


Rules never reduced:
	iterate : ITERATE INT TIMES iterate  (14)
	whil : WHILE test DO whil  (17)
	if_sans_else : IF test THEN if_sans_else  (20)


State 57 contains 5 reduce/reduce conflicts.
State 60 contains 5 reduce/reduce conflicts.
State 63 contains 5 reduce/reduce conflicts.


43 terminals, 13 nonterminals
46 grammar rules, 70 states
